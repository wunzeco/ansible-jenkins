---

- name: Get jenkins debian package
  get_url:
    url:   "{{ jenkins_pkg_url }}"
    dest:  "/var/tmp/{{ jenkins_deb_pkg }}"
  when: ansible_os_family|lower == 'debian'

- name: Install jenkins | Debian
  apt:
    deb:   "/var/tmp/{{ jenkins_deb_pkg }}"
    state: "{{ jenkins_package_state }}"
  when: ansible_os_family|lower == 'debian'
  register: deb_install

- name: Get jenkins rpm package
  get_url:
    url:   "{{ jenkins_pkg_url }}"
    dest:  "/var/tmp/{{ jenkins_rpm_pkg }}"
  when: ansible_os_family|lower == 'redhat'

- name: Install jenkins | RedHat
  yum:
    name:   "/var/tmp/{{ jenkins_rpm_pkg }}"
    state: "{{ jenkins_package_state }}"
  when: ansible_os_family|lower == 'redhat'
  register: rpm_install

- name: Check jenkins home dir exists in case it is different from the default /var/lib/jenkins
  stat:
    path: "{{ jenkins_home }}"
  register: h

- name: Ensure jenkins starts after install so initial password file is created
  service: name=jenkins state=started
  when: deb_install is changed or rpm_install is changed

- name: Wait for jenkins initial admin password file to be created
  wait_for:
    path: "/var/lib/jenkins/secrets/initialAdminPassword"
  when: (deb_install is changed or rpm_install is changed) and not h.stat.isdir|default(false)

- name: Stop jenkins
  service: name=jenkins state=stopped
  when: not h.stat.isdir|default(false)

- name: Stop processes running as jenkins user
  shell: pkill -u jenkins || true
  when: not h.stat.isdir|default(false)

- name: Ensure jenkins user home directory is in the appropriate location
  user:
    name:  "{{ jenkins_user }}"
    home:  "{{ jenkins_home }}"
    move_home: yes
  when: not h.stat.isdir|default(false)

- name: Create jenkins plugins directory
  file:
    path:  "{{ jenkins_plugins_dir }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode:  0755
    state: directory

- name: Find already installed plugins with *.jpi
  find:
    paths: "{{ jenkins_plugins_dir }}"
    patterns: "*.jpi"
  register: plugins_with_jpi

- name: print the number of *jpi's
  debug:
    msg:
      - "{{plugins_with_jpi.matched}}"

- name: Rename *.jpi to *.hpi before updating the jenkins plugins
  copy:
    src: "{{ item.path }}"
    dest: "{{ item.path | regex_replace('.jpi') }}.hpi"
    remote_src: yes
  with_items:
    - "{{ plugins_with_jpi.files }}"

- name: Rename *.jpi to *.hpi before updating the jenkins plugins
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ plugins_with_jpi.files }}"

- name: Install jenkins plugins
  get_url:
    url:   "{{ jenkins_update_center_download_url }}/plugins/{{ item.split(':')[0] }}/{{ item.split(':')[1]|default('latest') }}/{{ item.split(':')[0] }}.hpi"
    dest:  "{{ jenkins_plugins_dir }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode:  0644
  with_items: "{{ jenkins_plugins | unique }}"
  when: jenkins_update_plugins
  notify: Restart jenkins

- name: Create jenkins startup script default config | Debian
  template:
    src:   etc.default.jenkins.j2
    dest:  /etc/default/jenkins
    owner: root
    group: root
    mode:  0644
  when: ansible_os_family|lower == 'debian'
  notify: Restart jenkins

- name: Create jenkins startup script default config
  template:
    src:   jenkins.sysconfig.j2
    dest:  /etc/sysconfig/jenkins
    owner: root
    group: root
    mode:  0644
  when: ansible_os_family|lower == 'redhat'
  notify: Restart jenkins

- name: Start jenkins
  service: name=jenkins enabled=yes state=started

- name: Jenkins Post Init Scripts
  include_tasks: post-init.yml

- name: Jenkins CLI
  include_tasks: cli.yml

- name: UI users
  include_tasks: users.yml

- name: Create NVD directory
  file:
    path: "{{ jenkins_home }}/nvd/"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    state: directory

- name: Start NVD mirror container
  docker_container:
    image: "sspringett/nvdmirror"
    name: "mirror"
    keep_volumes: yes
    recreate: no
    log_driver: json-file
    log_options:
      max-size: "200M"
      max-file: "1"
    published_ports: "80:80"
    volumes: "{{ jenkins_home }}/nvd/:/tmp/nvd/"
    restart_policy: "on-failure"
    restart_retries: 3
    state: started
  retries: 3
  delay: 30
